{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#nima-saed","title":"Nima Saed","text":""},{"location":"#ethical-hacker-software-security-engineer-devsecops-engineer","title":"Ethical Hacker, Software Security Engineer, DevSecOps Engineer","text":"<p>Nima is a skilled security consultant at Xebia in the Netherlands. They specialize in offering top-notch consultancy services for digital transformation.</p> <p>Nima has an impressive 19-year career in the IT industry, with a specialization in security for the last 13 years. Nima started as a software security engineer and worked as an ethical hacker.</p> <p>Nima is well-educated in security tech and cryptography, with expertise in software security, encryption, and digital signatures. He conducts effective penetration tests on software components, particularly those related to authentication and authorization.</p> <p>Throughout Nima's career, he has worked across diverse sectors, including the medical, education, metal, and software industries. Each industry presents its unique set of privacy and security challenges. However, Nima's goal remains constant: introducing security processes as enablers rather than blockers. He firmly believes in the power of automation and simplicity, consistently incorporating these principles at the core of his approach.</p> <p>Nima is dedicated to guaranteeing your security and triumph in the digital realm. His extensive experience, profound knowledge, and unwavering commitment to excellence empower him to impact your company's security posture substantially.</p> <p>email: nsaed@xebia.com</p>"},{"location":"blog/AWS-Profile-changer/","title":"AWS Profile Changer in Bash","text":"<p>If you are like me and need to deal with multiple AWS profiles simultaneously, you need to keep switching between profiles. Many plugins are available for bash or zsh, but I want to keep it simple and only run the code that I understand.</p> <p>You can add the below function to your bashrc to change the <code>AWS_PROFILE</code> environment variable on the fly. It will read the AWS config file and list all the available profiles; then, you can select the one you need.</p> <pre><code>function aws_profile() {\nlocal aws_home=\"$HOME/.aws\"\nlocal profiles=(`\\\ncat ${aws_home}/config | \\\ngrep profile | \\\nsed 's/\\[//g;s/\\]//g' | \\\ncut -d \" \" -f 2`);\nPS3=\"Select a profile: [none = 0] \"\nselect profile in ${profiles[@]}\ndo\nselected=$profile;\nbreak;\ndone\nunset $PS3;\nif [ ! -z \"${profile}\" ];\nthen\nexport AWS_PROFILE=\"${profile}\";\nexport AWS_REGION=$(cat ${aws_home}/config | sed -n \"/${profile}/,/\\[/p\" | grep region | cut -d '=' -f 2 | sed 's/ //g')\nexport AWS_ACCESS_KEY_ID=$(cat ${aws_home}/credentials | sed -n \"/${profile}/,/\\[/p\" | grep aws_access_key_id | cut -d '=' -f 2 | sed 's/ //g')\nexport AWS_SECRET_ACCESS_KEY=$(cat ${aws_home}/credentials | sed -n \"/${profile}/,/\\[/p\" | grep aws_secret_access_key | cut -d '=' -f 2 | sed 's/ //g')\nfi\n}\n</code></pre> <p>TODO:</p> <ul> <li> List AWS Profiles</li> <li> Select and update AWS profile</li> <li> Add region changer</li> <li> Add ability to add a profile</li> <li> Add ability to remove a profile</li> </ul>"},{"location":"blog/Metasploit-Framework-console/","title":"Metasploit Framework console on Docker. (with workspace)","text":"<p>Sep 20, 2019</p> <p></p>"},{"location":"blog/Metasploit-Framework-console/#summary","title":"Summary","text":"<p>I am a security specialist. I love Linux and containers. I would not say I like Kali Linux and bloated software. I use Metasploit Framework on Docker with workspace. Although you can start using the MSF docker out of the box, you need a database for using the workspace. Here is how.</p>"},{"location":"blog/Metasploit-Framework-console/#containers-are-everywhere-in-my-life","title":"Containers are everywhere in my life","text":"<p>Over the past few years, I started to like Docker and containerization in general. Before that, I had some resistance against containerization. Compared to VM, I saw VMs more secure and isolated. But now I have a different opinion. Although some of the security concerns about containers are true, at least for now, the benefits of containers are more appealing to me now. I have started using Docker wherever I can in my job or even personal life. I use Docker to build my automated security testing platform at work, and I use them to integrate my security testing tools. I run my services such as OpenVPN and Plex on Docker at home. They are everywhere in my life.</p> <p>I would not say I like to use Kali Linux because of 1. I am not particularly eager to run VM all the time. 2. Kali Linux is bloated. 3. There are so many tools that I don\u2019t even use. Instead, I use Arch Linux as my daily driver with a minimum number of packages installed. I use the Blackarch strap on my Arch Linux to get security tools or build the tools on Docker. One of the tools that I use is Metasploit Framework, and thanks to the Rapid7 team, there is a docker for MSF, which is getting updates every day or even sometimes twice a day. Although you can start using the MSF docker out of the box, you need a database for using the workspace.</p>"},{"location":"blog/Metasploit-Framework-console/#msf-console-on-docker","title":"MSF Console on Docker","text":"<p>You need MSF and Postgres docker. You also need to set up a docker network. First, create a directory in your home directory for MSF files. You also need a directory to keep Postgres data. Let\u2019s keep it in the same place with MSF files.</p> <pre><code>mkdir $HOME/.msf4\nmkdir $HOME/.msf4/database\n</code></pre>"},{"location":"blog/Metasploit-Framework-console/#network","title":"Network","text":"<p>You need a docker network to assign a fixed IP to each container. Let\u2019s create a network with a subnet of 172.18.0.0/16, and we call it msf.</p> <pre><code>docker network create --subnet=172.18.0.0/16 msf\n</code></pre>"},{"location":"blog/Metasploit-Framework-console/#database","title":"Database","text":"<p>Now we need the database. Here we are going to use Postgres 11 with alpine based os. Let\u2019s assign it to network msf and give IP 172.18.0.2. You need to mount a volume to keep the data, and you also need to set the value to Postgres\u2019s username, password and database name.</p> <pre><code>docker run --ip 172.18.0.2 --network msf --rm --name postgres -v \"${HOME}/.msf4/database:/var/lib/postgresql/data\" -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=msf -d postgres:11-alpine\n</code></pre>"},{"location":"blog/Metasploit-Framework-console/#msf","title":"MSF","text":"<p>Now we can run MSF on Docker, but we need to set database URL (including username, password, and database name in URL) for the first time. You also need to mount the volume to save the data. Lastly, you need to map the range of ports that MSF will use.</p> <pre><code>docker run --rm -it --network msf --name msf --ip 172.18.0.3 -e DATABASE_URL='postgres://postgres:postgres@172.18.0.2:5432/msf' -v \"${HOME}/.msf4:/home/msf/.msf4\" -p 8443-8500:8443-8500 metasploitframework/metasploit-framework\n</code></pre>"},{"location":"blog/Metasploit-Framework-console/#save-database-setting","title":"Save database setting","text":"<p>You can save the database setting in MSF. To do so, inside the MSF console, execute db_save. Now you can run MSF docker without setting database URL.</p> <pre><code>docker run --rm -it -u 0 --network msf --name msf --ip 172.18.0.3 -v \"${HOME}/.msf4:/home/msf/.msf4\" -p 8443-8500:8443-8500 metasploitframework/metasploit-framework\n</code></pre>"},{"location":"blog/Metasploit-Framework-console/#msf-function-in-bashrc","title":"MSF function in .bashrc","text":"<p>If you are using Linux, you can also use the below function in your bashrc. First, it will check if the msf network exists; if not, it will create the network. Then it will check if Postgres docker is running; if not, it will start the Postgres docker. Lastly, it will start the MSF docker.</p> <pre><code>function msf-docker() {\nif [ -z \"$(docker network ls | grep -w msf)\" ];\nthen\ndocker network create --subnet=172.18.0.0/16 msf\n fi\nif [ -z \"$(docker ps -a | grep -w postgres)\" ];\nthen\ndocker run --ip 172.18.0.2 --network msf --rm --name postgres -v \"${HOME}/.msf4/database:/var/lib/postgresql/data\" -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=msf -d postgres:11-alpine\n fi\ndocker run --rm -it -u 0 --network msf --name msf --ip 172.18.0.3 -v \"${HOME}/.msf4:/home/msf/.msf4\" -p 8443-8500:8443-8500 metasploitframework/metasploit-framework\n}\n</code></pre> <p>If you need help with any of these, drop me a message.</p>"},{"location":"blog/sudo-with-touch-id-on-Mac/","title":"Enabling Touch ID for <code>sudo</code> on macOS","text":"<p>Did you know that you can utilize your Mac's Touch ID feature to execute <code>sudo</code> commands without the need to enter your password? This convenient trick can save you time and streamline your workflow. Let's delve into the process of setting it up.</p> <p>To enable Touch ID for <code>sudo</code>, follow these steps:</p> <ol> <li> <p>Open the Terminal application on your Mac.</p> </li> <li> <p>Type the following command to open the <code>sudo</code> PAM configuration file using the <code>vim</code> text editor:</p> </li> </ol> <pre><code>sudo vim /etc/pam.d/sudo\n</code></pre> <ol> <li>Add the following line at the top of the file:</li> </ol> <pre><code>auth sufficient pam_tid.so\n</code></pre> <p>This line enables Touch ID authentication for <code>sudo</code> commands.</p> <ol> <li> <p>If you use TMUX, you'll need to attach the PAM (Pluggable Authentication Module) to TMUX to ensure that the Touch ID integration works within TMUX sessions. To do this, follow these additional steps:</p> </li> <li> <p>Install <code>pam-reattach</code> using Homebrew by running the following command:</p> <pre><code>brew install pam-reattach\n</code></pre> </li> <li> <p>Open the <code>sudo</code> PAM configuration file again:</p> <pre><code>sudo vim /etc/pam.d/sudo\n</code></pre> </li> <li> <p>Add the following line below the previous line:</p> <pre><code>auth optional /opt/homebrew/lib/pam/pam_reattach.so\n</code></pre> </li> </ol> <p>These lines enable Touch ID support within TMUX sessions as well.</p> <ol> <li> <p>Save the changes to the file.</p> </li> <li> <p>You might need to reboot your Mac or restart any open Terminal or TMUX sessions for the changes to take effect.</p> </li> </ol> <p>Here's a convenient script that automates these steps for you:</p> <pre><code>#!/usr/bin/env bash\nset -o nounset # Treat unset variables as an error\n# This script is going to add touch id to sudo command, including inside TMUX\necho \"NOTICE: you need to install pam-reattach to use it in TMUX\"\nsudo_path=\"/etc/pam.d/sudo\"\nchmod 644 $sudo_path\nsed -i -e '2s/^/auth\\t   sufficient\\t  pam_tid.so\\n/' $sudo_path\nsed -i -e '3s/^/auth\\t   optional\\t  \\/opt\\/homebrew\\/lib\\/pam\\/pam_reattach.so\\n/' $sudo_path\nchmod 444 $sudo_path\n</code></pre> <p>Just execute this script in your Terminal, and it will handle the necessary configurations for you.</p> <p>With Touch ID-enabled <code>sudo</code>, you can now perform administrative tasks more conveniently and securely. This feature not only eliminates the need to type your password but also enhances the overall accessibility of your Mac. Give it a try and experience the seamless power of Touch ID in your command-line activities!\"</p>"},{"location":"notes/bash-tips/","title":"Bash Tips","text":""},{"location":"notes/bash-tips/#printf","title":"Printf","text":"<pre><code>printf \"%s\\n\" print arguments on \"separate lines\"\n</code></pre> <pre><code>print\narguments\non\nseparate\nlines\n</code></pre> <pre><code>printf \"%b\\n\" \"Hello\\nWorld\" \"12\\twords\"\n</code></pre> <pre><code>Hello\nWorld\n12      words\n</code></pre> <pre><code>printf \"%d\\n\" 23 45 56.78 0xff 011\n</code></pre> <pre><code>23\n45\n-bash: printf: 56.78: invalid number\n56\n255\n9\n</code></pre> <p>Note</p> <p>Using a leading 0 is going to be octal. Using a lead 0x is going to be hexadecimal.</p> <pre><code>printf \"%f\\n\" 12.24 23 56.789 1.2345678\n</code></pre> <pre><code>12.240000\n23.000000\n56.789000\n1.234568\n</code></pre> <pre><code>printf \"%e\\n\" 12.34 23\n</code></pre> <pre><code>1.234000e+01\n2.300000e+01\n</code></pre>"},{"location":"notes/bash-tips/#width","title":"Width","text":"<p>Note</p> <p><code>-</code> here in output means space.</p> <pre><code>printf \"%8s %10s\\n\" nima saed\n</code></pre> <pre><code>----nima ------saed\n</code></pre> <pre><code>printf \"%8s %-10s\\n\" nima saed\n</code></pre> <pre><code>----nima saed------\n</code></pre> <pre><code>printf \"%8.2s %-10s\\n\" nima saed\n</code></pre> <pre><code>------ni saed------\n</code></pre> <pre><code>printf \"%4d\\n\" 23 54\n</code></pre> <pre><code>--23\n--54\n</code></pre> <pre><code>printf \"%04d\\n\" 23 54\n</code></pre> <pre><code>0023\n0054\n</code></pre> <pre><code>printf \"%10.4d\\n\" 23 54\n</code></pre> <pre><code>------0023\n------0054\n</code></pre> <pre><code>printf \"%10.4f\\n\" 23 54\n</code></pre> <pre><code>---23.0000\n---54.0000\n</code></pre>"},{"location":"notes/bash-tips/#read-command","title":"read command","text":"<pre><code>read a b \"test test1 test2\"\necho $a\necho $b\n</code></pre> <pre><code>test\ntest1 test2\n</code></pre>"},{"location":"notes/bash-tips/#while-loop","title":"while loop","text":"<pre><code>while\ncommand lists\ndo\ncommand lists\ndone\n</code></pre>"},{"location":"notes/bash-tips/#examples","title":"examples","text":"<pre><code>while\n((x&lt;10))\ndo\necho loop $x;\ndate &gt; date.$x;\n((x=x+1))\ndone\n</code></pre> <pre><code>while\nread a b\ndo\necho a is $a b is $b\ndone &lt;data_file\n</code></pre> <pre><code>ls -l | while read a b c d; do echo owner is $c; done\n</code></pre>"},{"location":"notes/bash-tips/#for-loops","title":"For Loops","text":"<pre><code>for &lt;var&gt; in &lt;list&gt;\ndo\ncomand lists\ndone\n</code></pre>"},{"location":"notes/bash-tips/#examples_1","title":"Examples","text":"<pre><code>for i in dog cat elephant\ndo\necho i is $i\ndone\n</code></pre> <pre><code>for i in dog cat elephant; do echo i is $i; done\n</code></pre>"},{"location":"notes/bash-tips/#seq","title":"seq","text":"<pre><code>seq 1 5\n</code></pre> <pre><code>1\n2\n3\n4\n5\n</code></pre> <pre><code>for num in `seq 1 5`; do echo $num; done\n</code></pre> <pre><code>1\n2\n3\n4\n5\n</code></pre> <p>Note</p> <p>You can also use <code>{A..Z}</code>, <code>{a..f}</code> or <code>{1..10}</code> in for loops.</p> <pre><code>for i in {a..f}; do echo $i; done\n</code></pre> <pre><code>a\nb\nc\nd\ne\nf\n</code></pre>"},{"location":"notes/bash-tips/#dealing-with-files","title":"Dealing with files","text":"<pre><code>for d in $(&lt;data_file); do echo $d; done\n</code></pre> <pre><code>for j in *.c\n# making a list with file globbing\ndo\ncommand\ndone\n</code></pre> <pre><code>for f in $(find . -name *.c)\ndo\ncommand\ndone\n</code></pre>"},{"location":"notes/bash-tips/#listarray","title":"List/Array","text":"<pre><code>for n in ${list[@]}; do echo $n; done\n</code></pre>"},{"location":"notes/bash-tips/#functions","title":"Functions","text":"<pre><code>function name{\ncommand list\n}\n</code></pre> <pre><code>function myfunc {\necho starting\n    return\necho this will not be executed\n}\n</code></pre>"},{"location":"notes/bash-tips/#export-functions","title":"Export functions","text":"<pre><code>export -f myfunc\n</code></pre>"},{"location":"notes/bash-tips/#case-statement","title":"Case Statement","text":"<pre><code>case expression in\npattern 1 )\ncommand list ;;\npattern 2 )\ncommand list ;;\nesac\n</code></pre> <pre><code>case $ans in\nyes|YES|y|Y|y.x) echo \"Will do!\";;\nn*|N*) echo \"Will NOT do!\";;\n*) echo \"Oops!\";;\nesac\n</code></pre>"},{"location":"notes/bash-tips/#if-then-else-statement","title":"If-Then-Else Statement","text":"<pre><code>if\ncommand list # last result is used\nthen\ncommand list\n    [else\ncommand list]\nfi\n</code></pre>"},{"location":"notes/bash-tips/#example","title":"Example","text":"<pre><code>if\ngrep -q important myfile\nthen\necho myfile has important stuff\nelse\necho myfile does not have important stuff\nfi\n</code></pre>"},{"location":"notes/bash-tips/#extra","title":"Extra","text":""},{"location":"notes/bash-tips/#file-name-and-path","title":"File name and path","text":"<p>Note</p> <p>This code is inside the script file.</p>"},{"location":"notes/bash-tips/#to-get-name-of-script-file","title":"To get name of script file","text":"<pre><code>echo $0\n</code></pre>"},{"location":"notes/bash-tips/#to-get-full-path-of-the-file","title":"To get full path of the file","text":"<pre><code>echo $(readlink -f $0)\n</code></pre>"},{"location":"notes/bash-tips/#to-get-full-path-but-move-one-directory-up","title":"To get full path but move one directory up","text":"<pre><code>echo $(dirname \"$(readlink -f $0)\")\n</code></pre>"},{"location":"notes/bash-tips/#progress-bar","title":"Progress bar","text":"<pre><code>echo -ne '#####                     (33%)\\r'\nsleep 1\necho -ne '#############             (66%)\\r'\nsleep 1\necho -ne '#######################   (100%)\\r'\necho -ne '\\n'\n</code></pre>"},{"location":"notes/bash-tips/#bash-parsing-and-expansion","title":"Bash parsing and expansion","text":"<ol> <li>Brace expansion</li> </ol> <pre><code>{one,two,three}\n{1..10} or {a..z}\npre{d,l}ate\n{{1..3},{a..c}} =&gt; 1,2,3,a,b,c\n{1..3}{a..c} =&gt; 1a,1b,1c,2a,...,3c\n{01..13..3} =&gt; 01,04,07,10,13\n{a..h..3} =&gt; a,d,g\n</code></pre> <ol> <li>Tilde expansion</li> </ol> <pre><code>~ =&gt; /home/nima\n~someone =&gt; /home/someone\n~noUser =&gt; ~noUser\n</code></pre> <ol> <li>Parameter and variable expansion</li> </ol> <pre><code>var=whatever\n$var or ${var} =&gt; whatever\necho $var \u201c$var\u201d #are having different result  if there are white spaces\n</code></pre> <ol> <li>Arithmetic expansion</li> </ol> <pre><code>$(( expression ))\n</code></pre> <ol> <li>Command substitution</li> </ol> <pre><code>wc -l $( date +%Y-%m-%d).log\n</code></pre> <p>Note</p> <p>If command substitution is not quoted, word splitting and pathname expansion are performed on the result.</p> <ol> <li>Word splitting</li> </ol> <p>The result of parameter and arithmetic expansion, as well as command substitution, are subject to word splitting if the were NOT QUETED</p> <pre><code>var=\"this is a multi-word value\"\nprintf \":%s:\\n\" $var\n</code></pre> <pre><code>:this:\n:is:\n:a:\n:multi-word:\n:value:\n</code></pre> <pre><code>var=\"this is a multi-word value\"\nprintf \":%s:\\n\" $var\n</code></pre> <pre><code>:this is a multi-word value:\n</code></pre> <p>Note</p> <p>Word splitting is based on value of IFS (Internal Field Separator). IFS default value is space, tab, and newline. (IFS=$' \\t\\n'). You can change IFS value to any value.</p> <ol> <li>Pathname expansion</li> </ol> <p>Char in use are *, ?, and []</p> <pre><code>echo D*\n</code></pre> <p>list files starting with capital D.</p> <pre><code>echo ?a*\n</code></pre> <p>list files which the second char is a.</p> <pre><code>echo *[0-9]*\n</code></pre> <p>list files which there is at least one number in there name.</p> <ol> <li>Process substitution</li> </ol> <pre><code>&lt;(command)\n&gt;(command)\n</code></pre>"},{"location":"notes/bash-tips/#parameter-expansion","title":"Parameter Expansion","text":"<p>empty or unset variable</p> <ol> <li> <p>Default</p> <ul> <li>echo {var:-default} =&gt; default if it is not set and empty string</li> <li>echo {var-default}  =&gt; default if it is not set</li> </ul> </li> <li> <p>Alternative</p> <ul> <li>echo {var:+alter}   =&gt; alter if it is set and not empty string</li> <li>echo {var+alter}    =&gt; alter if it is set</li> </ul> </li> <li> <p>Default with assignment</p> <ul> <li>echo {var:=default} =&gt; default if it is not set and empty string, assign default to var as well</li> <li>echo {var=default}  =&gt; default if it is not set, assign default to var as well.</li> </ul> </li> <li> <p>Message</p> <ul> <li>echo {var:?message} =&gt; display error message if it is not set and empty string</li> <li>echo {var?message}  =&gt; display error message if it is not set</li> </ul> </li> </ol> <p>** Length of var</p> <pre><code>var=test\necho ${#var}\n</code></pre> <pre><code>4\n</code></pre> <p>Remove Pattern</p> <ul> <li>Short from end</li> </ul> <p><pre><code>var=Toronto\necho ${var%o*}\n</code></pre> <pre><code>Toront\n</code></pre></p> <ul> <li>Long from end</li> </ul> <pre><code>var=Toronto\necho ${var%%o*}\n</code></pre> <pre><code>T\n</code></pre> <ul> <li>Short from beginning</li> </ul> <pre><code>var=Toronto\necho ${var#*o}\n</code></pre> <pre><code>ronto\n</code></pre> <ul> <li>Long from beginning</li> </ul> <pre><code>scriptname=${0##*/} ## /home/user/script.sh =&gt; script.sh\n</code></pre> <p>Replace pattern</p> <pre><code>password=reretrgfdsgdhdt\necho \"${password//?/*}\"\n</code></pre> <pre><code>*************\n</code></pre> <p>Substring var:offset:length</p> <pre><code>var=Toronto\necho \"${var:3:2}\"\n</code></pre> <pre><code>on\n</code></pre> <pre><code>var=Toronto\necho \"${var:1}\"\n</code></pre> <pre><code>oronto\n</code></pre> <p>Negative offset</p> <pre><code>var=Toronto\necho \"${var: -3}\" # Do not forget about space betwen : and -\n</code></pre> <pre><code>nto\n</code></pre>"}]}